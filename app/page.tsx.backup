"use client";

import { Navigation } from "@/components/Navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar, List, Clock, ChefHat } from "lucide-react";
import { useState, useEffect } from "react";
import { format } from "date-fns";
import { schedulesApi, Schedule, ScheduleCompletion } from "@/lib/supabase-client";
import Link from "next/link";

export default function Home() {
  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [memberSchedules, setMemberSchedules] = useState<{ [key: string]: Array<{
    id: string;
    title: string;
    description?: string;
    frequency: string;
    start_date: string;
    end_date?: string;
    family_members: string[];
    completed: boolean;
  }> }>({});
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState({
    totalSchedules: 0,
    totalFamilyMeals: 0,
    totalMeals: 0,
    totalRecipes: 0,
    yesterdayUncompleted: 0,
    todayUncompleted: 0,
    tomorrowUncompleted: 0,
  });

  // 실제 데이터 로드
  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setIsLoading(true);
      console.log('데이터 로드 시작...');
      
      try {
        // 기본 통계 데이터만 로드 (일정 관련)
        const schedulesData = await schedulesApi.getAll();
        
        if (schedulesData) {
          setSchedules(schedulesData);
        }
        
        // 가족 구성원별 오늘 일정 조회
        const familyMembers = ['family', 'mom', 'sein', 'seha', 'dad'];
        console.log('가족 구성원별 일정 조회 시작...');
        
        try {
          const todayMemberSchedules = await schedulesApi.getTodaySchedulesByMember(familyMembers);
          setMemberSchedules(todayMemberSchedules);
          console.log('가족 구성원별 오늘 일정 로드 완료:', todayMemberSchedules);
        } catch (scheduleError) {
          console.error('가족 구성원별 일정 조회 실패:', scheduleError);
          // 에러 시 빈 데이터로 설정
          const emptySchedules: { [key: string]: Array<{
            id: string;
            title: string;
            description?: string;
            frequency: string;
            start_date: string;
            end_date?: string;
            family_members: string[];
            completed: boolean;
          }> } = {};
          familyMembers.forEach(member => {
            emptySchedules[member] = [];
          });
          setMemberSchedules(emptySchedules);
        }
        
        // 기본 통계 설정
        setStats({
          totalSchedules: schedulesData?.length || 0,
          totalFamilyMeals: 0,
          totalMeals: 0,
          totalRecipes: 0,
          yesterdayUncompleted: 0,
          todayUncompleted: 0,
          tomorrowUncompleted: 0,
        });

    } catch (error) {
      console.error('데이터 로드 실패:', error);
      // 에러 시에도 기본 통계는 0으로 설정
      setStats({
        totalSchedules: 0,
        totalFamilyMeals: 0,
        totalMeals: 0,
        totalRecipes: 0,
        yesterdayUncompleted: 0,
        todayUncompleted: 0,
        tomorrowUncompleted: 0,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // 일정 통계 계산 (완료 상태 고려)
  useEffect(() => {
    if (schedules.length === 0) return;

    // 현재 시간 기준으로 정확한 날짜 계산
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // 시간 제거
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    console.log('날짜 계산:', {
      today: format(today, 'yyyy-MM-dd'),
      yesterday: format(yesterday, 'yyyy-MM-dd'),
      tomorrow: format(tomorrow, 'yyyy-MM-dd')
    });

    const getUncompletedCountForDate = async (date: Date) => {
      try {
        const dateString = format(date, 'yyyy-MM-dd');
        
        // 해당 날짜에 실행되어야 하는 일정들을 정확히 계산
        const applicableSchedules = schedules.filter(schedule => {
          const start = new Date(schedule.start_date);
          const end = schedule.end_date ? new Date(schedule.end_date) : new Date(2100, 0, 1);
          
          // 날짜 범위 체크 (시간 제거하여 정확한 비교)
          const checkDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
          const startDate = new Date(start.getFullYear(), start.getMonth(), start.getDate());
          const endDate = new Date(end.getFullYear(), end.getMonth(), end.getDate());
          
          if (checkDate < startDate || checkDate > endDate) return false;
          
          // 빈도별 필터링 (일정관리 페이지와 동일한 로직)
          switch (schedule.frequency) {
            case 'daily':
              return true;
            case 'weekly':
              if (schedule.weekly_day !== null && schedule.weekly_day !== undefined) {
                let scheduleDay = schedule.weekly_day;
                if (scheduleDay >= 1 && scheduleDay <= 7) {
                  scheduleDay = scheduleDay === 7 ? 0 : scheduleDay;
                }
                return date.getDay() === scheduleDay;
              }
              // 주차 기반
              const weekStart = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate() - startDate.getDay());
              const currentWeekStart = new Date(checkDate.getFullYear(), checkDate.getMonth(), checkDate.getDate() - checkDate.getDay());
              const weekDiff = Math.floor((currentWeekStart.getTime() - weekStart.getTime()) / (7 * 24 * 60 * 60 * 1000));
              return weekDiff >= 0 && weekDiff % 1 === 0;
            case 'monthly':
              if (schedule.monthly_day !== null && schedule.monthly_day !== undefined) {
                return date.getDate() === schedule.monthly_day;
              }
              return date.getDate() === startDate.getDate();
            case 'custom':
              if (schedule.custom_pattern) {
                try {
                  const pattern = JSON.parse(schedule.custom_pattern);
                  switch (pattern.type) {
                    case 'daily':
                      return true;
                    case 'interval':
                      const daysDiff = Math.floor((checkDate.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000));
                      return daysDiff >= 0 && daysDiff % pattern.interval === 0;
                    case 'specific_days':
                      return pattern.days?.includes(date.getDay()) || false;
                    case 'weekday':
                      const currentDay = date.getDay();
                      return currentDay >= 1 && currentDay <= 5;
                    case 'weekend':
                      const day = date.getDay();
                      return day === 0 || day === 6;
                    default:
                      return true;
                  }
                } catch (error) {
                  return true;
                }
              }
              return true;
            default:
              return false;
          }
        });
        
        if (applicableSchedules.length === 0) {
          console.log(`${dateString}: 실행 가능한 일정 없음`);
          return 0;
        }
        
        const scheduleIds = applicableSchedules.map(s => s.id);
        
        // 해당 날짜의 완료 상태 일괄 조회
        const completions = await schedulesApi.getCompletionStatuses(scheduleIds, dateString, dateString);
        
        // 완료되지 않은 일정 수 계산
        const uncompletedCount = applicableSchedules.filter(schedule => {
          const completion = completions.find(c => c.schedule_id === schedule.id);
          return !completion || !completion.completed;
        }).length;
        
        console.log(`${dateString}: 실행 가능 일정 ${applicableSchedules.length}개, 미완료 ${uncompletedCount}개`);
        
        return uncompletedCount;
      } catch (error) {
        console.error(`${format(date, 'yyyy-MM-dd')} 완료 상태 조회 실패:`, error);
        return 0;
      }
    };

    // 비동기로 통계 계산
    const calculateStats = async () => {
      const [yesterdayCount, todayCount, tomorrowCount] = await Promise.all([
        getUncompletedCountForDate(yesterday),
        getUncompletedCountForDate(today),
        getUncompletedCountForDate(tomorrow)
      ]);

      console.log('최종 통계:', {
        yesterday: yesterdayCount,
        today: todayCount,
        tomorrow: tomorrowCount
      });

      setStats(prev => ({
        ...prev,
        yesterdayUncompleted: yesterdayCount,
        todayUncompleted: todayCount,
        tomorrowUncompleted: tomorrowCount,
      }));
    };

    calculateStats();
  }, [schedules]);

  const features = [
    {
      title: "가족식단",
      description: "월별 캘린더로 가족의 아침, 점심, 저녁 식단을 관리하세요",
      icon: Calendar,
      href: "/family-meals",
      color: "bg-blue-500",
    },
    {
      title: "식단리스트",
      description: "자주 먹는 메뉴들을 관리하고 가족 호응도를 기록하세요",
      icon: List,
      href: "/meals",
      color: "bg-green-500",
    },
    {
      title: "레시피",
      description: "다양한 요리 레시피를 저장하고 공유하세요",
      icon: ChefHat,
      href: "/recipes",
      color: "bg-purple-500",
    },
    {
      title: "일정 관리",
      description: "주기적인 업무 일정을 캘린더로 관리하세요",
      icon: Clock,
      href: "/schedule",
      color: "bg-orange-500",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      <Navigation />
      
      <main className="max-w-7xl mx-auto px-4 py-8">
        {/* Hero Section */}
        <div className="text-center py-16 px-4">
          <h1 className="text-5xl md:text-7xl font-bold text-gray-900 mb-8">
            Simply Us.
          </h1>
          
          {/* 해야할일 영역을 타이틀 바로 아래로 이동 */}
          <div className="max-w-6xl mx-auto mb-12">
            <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8 border border-gray-100">
              <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-6 text-center">
                의미있는 하루
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div className="bg-orange-50 rounded-lg p-4 border border-orange-200">
                  <div className="text-orange-600 font-semibold mb-2 text-center">👨‍👩‍👧‍👦 Family</div>
                  <div className="mt-2 text-xs text-gray-500">
                    {isLoading ? (
                      <div className="text-gray-400">로딩 중...</div>
                    ) : memberSchedules['family'] && memberSchedules['family'].length > 0 ? (
                      memberSchedules['family'].slice(0, 3).map((schedule, index) => {
                        console.log(`Family 일정 ${index} 상세:`, {
                          title: schedule.title,
                          completed: schedule.completed,
                          family_members: schedule.family_members,
                          frequency: schedule.frequency,
                          start_date: schedule.start_date,
                          end_date: schedule.end_date
                        });
                        return (
                          <div key={index} className="flex items-center space-x-2">
                            {schedule.completed ? (
                              <>
                                <span className="text-green-500">✅</span>
                                <span className="line-through text-gray-400">{schedule.title}</span>
                              </>
                            ) : (
                              <>
                                <span className="text-blue-400">🚀</span>
                                <span className="text-gray-600">{schedule.title}</span>
                              </>
                            )}
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-gray-400">오늘 할일이 없습니다</div>
                    )}
                  </div>
                </div>
                <div className="bg-pink-50 rounded-lg p-4 border border-pink-200">
                  <div className="text-pink-600 font-semibold mb-2 text-center">👩 엄마</div>
                  <div className="mt-2 text-xs text-gray-500">
                    {isLoading ? (
                      <div className="text-gray-400">로딩 중...</div>
                    ) : memberSchedules['mom'] && memberSchedules['mom'].length > 0 ? (
                      memberSchedules['mom'].slice(0, 3).map((schedule, index) => {
                        console.log(`Mom 일정 ${index} 상세:`, {
                          title: schedule.title,
                          completed: schedule.completed,
                          family_members: schedule.family_members,
                          frequency: schedule.frequency
                        });
                        return (
                          <div key={index} className="flex items-center space-x-2">
                            {schedule.completed ? (
                              <>
                                <span className="text-green-500">✅</span>
                                <span className="line-through text-gray-400">{schedule.title}</span>
                              </>
                            ) : (
                              <>
                                <span className="text-blue-400">🚀</span>
                                <span className="text-gray-600">{schedule.title}</span>
                              </>
                            )}
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-gray-400">오늘 할일이 없습니다</div>
                    )}
                  </div>
                </div>
                <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                  <div className="text-green-600 font-semibold mb-2 text-center">👦 세인</div>
                  <div className="mt-2 text-xs text-gray-500">
                    {isLoading ? (
                      <div className="text-gray-400">로딩 중...</div>
                    ) : memberSchedules['sein'] && memberSchedules['sein'].length > 0 ? (
                      memberSchedules['sein'].slice(0, 3).map((schedule, index) => {
                        console.log(`Sein 일정 ${index} 상세:`, {
                          title: schedule.title,
                          completed: schedule.completed,
                          family_members: schedule.family_members,
                          frequency: schedule.frequency
                        });
                        return (
                          <div key={index} className="flex items-center space-x-2">
                            {schedule.completed ? (
                              <>
                                <span className="text-green-500">✅</span>
                                <span className="line-through text-gray-400">{schedule.title}</span>
                              </>
                            ) : (
                              <>
                                <span className="text-blue-400">🚀</span>
                                <span className="text-gray-600">{schedule.title}</span>
                              </>
                            )}
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-gray-400">오늘 할일이 없습니다</div>
                    )}
                  </div>
                </div>
                <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                  <div className="text-purple-600 font-semibold mb-2 text-center">👧 세하</div>
                  <div className="mt-2 text-xs text-gray-500">
                    {isLoading ? (
                      <div className="text-gray-400">로딩 중...</div>
                    ) : memberSchedules['seha'] && memberSchedules['seha'].length > 0 ? (
                      memberSchedules['seha'].slice(0, 3).map((schedule, index) => {
                        console.log(`Seha 일정 ${index} 상세:`, {
                          title: schedule.title,
                          completed: schedule.completed,
                          family_members: schedule.family_members,
                          frequency: schedule.frequency
                        });
                        return (
                          <div key={index} className="flex items-center space-x-2">
                            {schedule.completed ? (
                              <>
                                <span className="text-green-500">✅</span>
                                <span className="line-through text-gray-400">{schedule.title}</span>
                              </>
                            ) : (
                              <>
                                <span className="text-blue-400">🚀</span>
                                <span className="text-gray-600">{schedule.title}</span>
                              </>
                            )}
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-gray-400">오늘 할일이 없습니다</div>
                    )}
                  </div>
                </div>
                <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                  <div className="text-blue-600 font-semibold mb-2 text-center">👨 아빠</div>
                  <div className="mt-2 text-xs text-gray-500">
                    {isLoading ? (
                      <div className="text-gray-400">로딩 중...</div>
                    ) : memberSchedules['dad'] && memberSchedules['dad'].length > 0 ? (
                      memberSchedules['dad'].slice(0, 3).map((schedule, index) => {
                        console.log(`Dad 일정 ${index} 상세:`, {
                          title: schedule.title,
                          completed: schedule.completed,
                          family_members: schedule.family_members,
                          frequency: schedule.frequency
                        });
                        return (
                          <div key={index} className="flex items-center space-x-2">
                            {schedule.completed ? (
                              <>
                                <span className="text-green-500">✅</span>
                                <span className="line-through text-gray-400">{schedule.title}</span>
                              </>
                            ) : (
                              <>
                                <span className="text-blue-400">🚀</span>
                                <span className="text-gray-600">{schedule.title}</span>
                              </>
                            )}
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-gray-400">오늘 할일이 없습니다</div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Features Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {features.map((feature) => {
            const Icon = feature.icon;
            return (
              <Link key={feature.href} href={feature.href}>
                <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
                  <CardHeader className="text-center">
                    <div className={`w-16 h-16 mx-auto mb-4 rounded-full ${feature.color} flex items-center justify-center group-hover:scale-110 transition-transform`}>
                      <Icon className="h-8 w-8 text-white" />
                    </div>
                    <CardTitle className="text-xl">{feature.title}</CardTitle>
                    <CardDescription className="text-gray-600">
                      {feature.description}
                    </CardDescription>
                  </CardHeader>
                </Card>
              </Link>
            );
          })}
        </div>

        {/* 일정 통계 - 빠른 시작 위로 이동 */}
        <div className="mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Clock className="mr-2 h-5 w-5 text-orange-500" />
                해야 할 일
              </CardTitle>
              <CardDescription>
                어제, 오늘, 내일의 해야 할 일을 확인하세요
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Link href="/schedule?date=yesterday&view=day" className="block">
                  <div className="text-center p-4 bg-red-50 rounded-lg hover:bg-red-100 transition-colors cursor-pointer group">
                    <div className="text-2xl font-bold text-red-600 mb-1 group-hover:text-red-700">{stats.yesterdayUncompleted}</div>
                    <div className="text-sm text-red-700 group-hover:text-red-800">어제</div>
                    <div className="text-xs text-red-600 group-hover:text-red-700">했어야 할 일</div>
                  </div>
                </Link>
                <Link href="/schedule?date=today&view=day" className="block">
                  <div className="text-center p-4 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors cursor-pointer group">
                    <div className="text-2xl font-bold text-yellow-600 mb-1 group-hover:text-yellow-700">{stats.todayUncompleted}</div>
                    <div className="text-sm text-yellow-700 group-hover:text-yellow-800">오늘</div>
                    <div className="text-xs text-yellow-600 group-hover:text-yellow-700">아직 못한 일</div>
                  </div>
                </Link>
                <Link href="/schedule?date=tomorrow&view=day" className="block">
                  <div className="text-center p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors cursor-pointer group">
                    <div className="text-2xl font-bold text-blue-600 mb-1 group-hover:text-blue-700">{stats.tomorrowUncompleted}</div>
                    <div className="text-sm text-blue-700 group-hover:text-blue-800">내일</div>
                    <div className="text-xs text-blue-600 group-hover:text-blue-700">할 일</div>
                  </div>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">빠른 시작</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Link href="/family-meals">
              <Button className="w-full h-16 text-lg" size="lg">
                <Calendar className="mr-2 h-5 w-5" />
                오늘 식단 등록하기
              </Button>
            </Link>
            <Link href="/recipes">
              <Button variant="outline" className="w-full h-16 text-lg" size="lg">
                <ChefHat className="mr-2 h-5 w-5" />
                새 레시피 추가하기
              </Button>
            </Link>
          </div>
        </div>

        {/* Stats */}
        <div className="mt-12 grid grid-cols-1 md:grid-cols-4 gap-6">
          <Link href="/family-meals?view=week" className="block">
            <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-blue-600 mb-2 group-hover:text-blue-700">{stats.totalFamilyMeals}</div>
                <div className="text-gray-600 group-hover:text-gray-800">등록된 식단</div>
              </CardContent>
            </Card>
          </Link>
          <Link href="/meals" className="block">
            <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-green-600 mb-2 group-hover:text-green-700">{stats.totalMeals}</div>
                <div className="text-gray-600 group-hover:text-gray-800">저장된 메뉴</div>
              </CardContent>
            </Card>
          </Link>
          <Link href="/recipes" className="block">
            <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2 group-hover:text-purple-700">{stats.totalRecipes}</div>
                <div className="text-gray-600 group-hover:text-gray-800">레시피</div>
              </CardContent>
            </Card>
          </Link>
          <Link href="/schedule?view=month" className="block">
            <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-orange-600 mb-2 group-hover:text-orange-700">{stats.totalSchedules}</div>
                <div className="text-gray-600 group-hover:text-gray-800">등록된 일정</div>
              </CardContent>
            </Card>
          </Link>
        </div>
      </main>
    </div>
  );
}
